/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.1 (3.7)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IpSecProposalRequest : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpSecProposalRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// * `aes-128-cbc` - 128-bit AES (CBC) * `aes-128-gcm` - 128-bit AES (GCM) * `aes-192-cbc` - 192-bit AES (CBC) * `aes-192-gcm` - 192-bit AES (GCM) * `aes-256-cbc` - 256-bit AES (CBC) * `aes-256-gcm` - 256-bit AES (GCM) * `3des-cbc` - DES
    #[serde(rename = "encryption_algorithm")]
    pub encryption_algorithm: EncryptionAlgorithm,
    /// * `hmac-sha1` - SHA-1 HMAC * `hmac-sha256` - SHA-256 HMAC * `hmac-sha384` - SHA-384 HMAC * `hmac-sha512` - SHA-512 HMAC * `hmac-md5` - MD5 HMAC
    #[serde(rename = "authentication_algorithm")]
    pub authentication_algorithm: AuthenticationAlgorithm,
    /// Security association lifetime (seconds)
    #[serde(rename = "sa_lifetime_seconds", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sa_lifetime_seconds: Option<Option<i32>>,
    /// Security association lifetime (in kilobytes)
    #[serde(rename = "sa_lifetime_data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sa_lifetime_data: Option<Option<i32>>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTagRequest>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl IpSecProposalRequest {
    /// Adds support for custom fields and tags.
    pub fn new(name: String, encryption_algorithm: EncryptionAlgorithm, authentication_algorithm: AuthenticationAlgorithm) -> IpSecProposalRequest {
        IpSecProposalRequest {
            name,
            description: None,
            encryption_algorithm,
            authentication_algorithm,
            sa_lifetime_seconds: None,
            sa_lifetime_data: None,
            comments: None,
            tags: None,
            custom_fields: None,
        }
    }
}

/// * `aes-128-cbc` - 128-bit AES (CBC) * `aes-128-gcm` - 128-bit AES (GCM) * `aes-192-cbc` - 192-bit AES (CBC) * `aes-192-gcm` - 192-bit AES (GCM) * `aes-256-cbc` - 256-bit AES (CBC) * `aes-256-gcm` - 256-bit AES (GCM) * `3des-cbc` - DES
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EncryptionAlgorithm {
    #[serde(rename = "aes-128-cbc")]
    Aes128Cbc,
    #[serde(rename = "aes-128-gcm")]
    Aes128Gcm,
    #[serde(rename = "aes-192-cbc")]
    Aes192Cbc,
    #[serde(rename = "aes-192-gcm")]
    Aes192Gcm,
    #[serde(rename = "aes-256-cbc")]
    Aes256Cbc,
    #[serde(rename = "aes-256-gcm")]
    Aes256Gcm,
    #[serde(rename = "3des-cbc")]
    Variant3desCbc,
}

impl Default for EncryptionAlgorithm {
    fn default() -> EncryptionAlgorithm {
        Self::Aes128Cbc
    }
}
/// * `hmac-sha1` - SHA-1 HMAC * `hmac-sha256` - SHA-256 HMAC * `hmac-sha384` - SHA-384 HMAC * `hmac-sha512` - SHA-512 HMAC * `hmac-md5` - MD5 HMAC
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthenticationAlgorithm {
    #[serde(rename = "hmac-sha1")]
    Sha1,
    #[serde(rename = "hmac-sha256")]
    Sha256,
    #[serde(rename = "hmac-sha384")]
    Sha384,
    #[serde(rename = "hmac-sha512")]
    Sha512,
    #[serde(rename = "hmac-md5")]
    Md5,
}

impl Default for AuthenticationAlgorithm {
    fn default() -> AuthenticationAlgorithm {
        Self::Sha1
    }
}

