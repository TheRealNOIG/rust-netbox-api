/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.1 (3.7)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IkePolicyRequest : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IkePolicyRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// * `1` - IKEv1 * `2` - IKEv2
    #[serde(rename = "version")]
    pub version: Version,
    /// * `aggressive` - Aggressive * `main` - Main
    #[serde(rename = "mode")]
    pub mode: Mode,
    #[serde(rename = "proposals", skip_serializing_if = "Option::is_none")]
    pub proposals: Option<Vec<i32>>,
    #[serde(rename = "preshared_key", skip_serializing_if = "Option::is_none")]
    pub preshared_key: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTagRequest>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl IkePolicyRequest {
    /// Adds support for custom fields and tags.
    pub fn new(name: String, version: Version, mode: Mode) -> IkePolicyRequest {
        IkePolicyRequest {
            name,
            description: None,
            version,
            mode,
            proposals: None,
            preshared_key: None,
            comments: None,
            tags: None,
            custom_fields: None,
        }
    }
}

/// * `1` - IKEv1 * `2` - IKEv2
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "1")]
    Variant1,
    #[serde(rename = "2")]
    Variant2,
}

impl Default for Version {
    fn default() -> Version {
        Self::Variant1
    }
}
/// * `aggressive` - Aggressive * `main` - Main
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "aggressive")]
    Aggressive,
    #[serde(rename = "main")]
    Main,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Aggressive
    }
}

