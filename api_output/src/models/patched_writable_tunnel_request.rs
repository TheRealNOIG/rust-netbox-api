/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.7.1 (3.7)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PatchedWritableTunnelRequest : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedWritableTunnelRequest {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// * `planned` - Planned * `active` - Active * `disabled` - Disabled
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "group", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub group: Option<Option<i32>>,
    /// * `ipsec-transport` - IPsec - Transport * `ipsec-tunnel` - IPsec - Tunnel * `ip-ip` - IP-in-IP * `gre` - GRE
    #[serde(rename = "encapsulation", skip_serializing_if = "Option::is_none")]
    pub encapsulation: Option<Encapsulation>,
    #[serde(rename = "ipsec_profile", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ipsec_profile: Option<Option<i32>>,
    #[serde(rename = "tenant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Option<i32>>,
    #[serde(rename = "tunnel_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tunnel_id: Option<Option<i64>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTagRequest>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl PatchedWritableTunnelRequest {
    /// Adds support for custom fields and tags.
    pub fn new() -> PatchedWritableTunnelRequest {
        PatchedWritableTunnelRequest {
            name: None,
            status: None,
            group: None,
            encapsulation: None,
            ipsec_profile: None,
            tenant: None,
            tunnel_id: None,
            description: None,
            comments: None,
            tags: None,
            custom_fields: None,
        }
    }
}

/// * `planned` - Planned * `active` - Active * `disabled` - Disabled
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "planned")]
    Planned,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "disabled")]
    Disabled,
}

impl Default for Status {
    fn default() -> Status {
        Self::Planned
    }
}
/// * `ipsec-transport` - IPsec - Transport * `ipsec-tunnel` - IPsec - Tunnel * `ip-ip` - IP-in-IP * `gre` - GRE
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Encapsulation {
    #[serde(rename = "ipsec-transport")]
    IpsecTransport,
    #[serde(rename = "ipsec-tunnel")]
    IpsecTunnel,
    #[serde(rename = "ip-ip")]
    IpIp,
    #[serde(rename = "gre")]
    Gre,
}

impl Default for Encapsulation {
    fn default() -> Encapsulation {
        Self::IpsecTransport
    }
}

